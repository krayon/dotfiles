# Colours
#
# NOTE: For PS1, Colours need to be surrounded by:
#   '\[' and '\]'
# eg.
#   Black="\033[0;30m"
# to:
#   Black="\[\033[0;30m\]"

# Must declare explicitly as array in order to iterate over keys
declare -A _col col



#OLD
declare -A colbg colfg
colbg['black']="\033[40m"
colbg['blue']="\033[44m"
colbg['brown']="\033[43m"
colbg['cyan']="\033[46m"
colbg['green']="\033[42m"
colbg['lightgrey']="\033[47m"
colbg['purple']="\033[45m"
colbg['red']="\033[41m"
colfg['black']="\033[0;30m"
colfg['blue']="\033[0;34m"
colfg['brightblue']="\033[1;34m"
colfg['brightcyan']="\033[1;36m"
colfg['brown']="\033[0;33m"
colfg['cyan']="\033[0;36m"
colfg['darkgrey']="\033[1;30m"
colfg['green']="\033[0;32m"
colfg['lightgreen']="\033[1;32m"
colfg['lightgrey']="\033[0;37m"
colfg['lightred']="\033[1;31m"
colfg['pink']="\033[1;35m"
colfg['purple']="\033[0;35m"
colfg['red']="\033[0;31m"
colfg['white']="\033[1;37m"
colfg['yellow']="\033[1;33m"



_col[reset]='0'
col[reset]="\033[${_col[reset]}m"

_col[pr-bold]='1'
_col[pr-dim]='2'
_col[pr-italic]='3'
_col[pr-under]='4'
_col[pr-rev]='7'
col[pr-bold]="\033[${_col[pr-bold]}m"
col[pr-dim]="\033[${_col[pr-dim]}m"
col[pr-italic]="\033[${_col[pr-italic]}m"
col[pr-under]="\033[${_col[pr-under]}m"
col[pr-rev]="\033[${_col[pr-rev]}m"
col[pr-underline]="\033[${_col[pr-under]}m"
col[pr-reverse]="\033[${_col[pr-rev]}m"

_col[bg-default]='49'
_col[bg-black]='40'
_col[bg-red]='41'
_col[bg-green]='42'
_col[bg-yellow]='43'
_col[bg-blue]='44'
_col[bg-magenta]='45'
_col[bg-cyan]='46'
_col[bg-lightgrey]='47'
_col[bg-darkgrey]='100'
_col[bg-lightred]='101'
_col[bg-lightgreen]='102'
_col[bg-lightyellow]='103'
_col[bg-lightblue]='104'
_col[bg-lightmagenta]='105'
_col[bg-lightcyan]='106'
_col[bg-white]='107'
col[bg-default]="\033[${_col[bg-default]}m"
col[bg-black]="\033[${_col[bg-black]}m"
col[bg-red]="\033[${_col[bg-red]}m"
col[bg-green]="\033[${_col[bg-green]}m"
col[bg-yellow]="\033[${_col[bg-yellow]}m"
col[bg-blue]="\033[${_col[bg-blue]}m"
col[bg-magenta]="\033[${_col[bg-magenta]}m"
col[bg-cyan]="\033[${_col[bg-cyan]}m"
col[bg-lightgrey]="\033[${_col[bg-lightgrey]}m"
col[bg-darkgrey]="\033[${_col[bg-darkgrey]}m"
col[bg-lightred]="\033[${_col[bg-lightred]}m"
col[bg-lightgreen]="\033[${_col[bg-lightgreen]}m"
col[bg-lightyellow]="\033[${_col[bg-lightyellow]}m"
col[bg-lightblue]="\033[${_col[bg-lightblue]}m"
col[bg-lightmagenta]="\033[${_col[bg-lightmagenta]}m"
col[bg-lightcyan]="\033[${_col[bg-lightcyan]}m"
col[bg-white]="\033[${_col[bg-white]}m"

_col[fg-default]='39'
_col[fg-black]='30'
_col[fg-red]='31'
_col[fg-green]='32'
_col[fg-yellow]='33'
_col[fg-blue]='34'
_col[fg-magenta]='35'
_col[fg-cyan]='36'
_col[fg-lightgrey]='37'
_col[fg-darkgrey]='90'
_col[fg-lightred]='91'
_col[fg-lightgreen]='92'
_col[fg-lightyellow]='93'
_col[fg-lightblue]='94'
_col[fg-lightmagenta]='95'
_col[fg-lightcyan]='96'
_col[fg-white]='97'
col[fg-default]="\033[${_col[fg-default]}m"
col[fg-black]="\033[${_col[fg-black]}m"
col[fg-red]="\033[${_col[fg-red]}m"
col[fg-green]="\033[${_col[fg-green]}m"
col[fg-yellow]="\033[${_col[fg-yellow]}m"
col[fg-blue]="\033[${_col[fg-blue]}m"
col[fg-magenta]="\033[${_col[fg-magenta]}m"
col[fg-cyan]="\033[${_col[fg-cyan]}m"
col[fg-lightgrey]="\033[${_col[fg-lightgrey]}m"
col[fg-darkgrey]="\033[${_col[fg-darkgrey]}m"
col[fg-lightred]="\033[${_col[fg-lightred]}m"
col[fg-lightgreen]="\033[${_col[fg-lightgreen]}m"
col[fg-lightyellow]="\033[${_col[fg-lightyellow]}m"
col[fg-lightblue]="\033[${_col[fg-lightblue]}m"
col[fg-lightmagenta]="\033[${_col[fg-lightmagenta]}m"
col[fg-lightcyan]="\033[${_col[fg-lightcyan]}m"
col[fg-white]="\033[${_col[fg-white]}m"

# Validates a colour choice
#
# Usage:
#   _colour_validate <type> <val>
# Returns:
#   0 = match
#   1 = no-match
# Outputs:
#   Key if valid
_colour_validate() {
#>&2 echo "_colour_validate '${type}' '${val}'"
    local type val

    type="${1}"; shift 1
    val="${1}"; shift 1

    local k=0
    #local test_col="\033[${val}m"

    [ -n "${col[${type}-${val}]}" ] && {
        echo "${type}-${val}"
        return 0
    }

    # Invalid Colour
    return 1
}

# List all colours
colours() {
    echo "Supported colours by the colour command:"
    sed 's# #\n  - #g;s#^#  - #' <<<"${!_col[@]}"|sort
}

# Set the colour
#
# Usage:
#   colour [-v] <fg>|<n> [<bg>|<n> [<property>]]
# or:
#   colour [-v] <reset>|0
#
# -v|--value
#   output the value, don't apply it
colour() {
    local apply=yes fg= bg= prop= colall=
    [ "${1}" == '-v' ] || [ "${1}" == '--value' ] && apply= && shift 1

    [ "${1}" == "reset" ] || [ "${1}" == "reset" ] && {
        echo -n ${apply:+-e} "${col['reset']}"
        return
    }

    fg="${1}"; shift 1
    bg="${1}"; shift 1
    prop="${1}"; shift 1
#>&2 echo "prop: '${prop}'"
#>&2 echo "fg:   '${fg}'"
#>&2 echo "bg:   '${bg}'"

    [ ! -z "${prop}" ] && {
#>&2 echo "_col['pr-${prop}']='${_col["pr-${prop}"]}'"
        [ ! -z "${_col["pr-${prop}"]}" ] && {
            [ ! -z "${colall}" ] && colall+=';'
            colall+="${_col["pr-${prop}"]}"
        } || {
            local key=""
            key="$(_colour_validate 'pr' "${pr}")" && {
                [ ! -z "${colall}" ] && colall+=';'
                colall+="${_col["${key}"]}"
            } || {
                # Invalid Property
                >&2 echo "WARNING: Unknown colour property: ${pr}"
                pr=""
            }
        }
    }

    [ ! -z "${fg}" ] && {
#>&2 echo "_col['fg-${fg}']='${_col["fg-${fg}"]}'"
        [ ! -z "${_col["fg-${fg}"]}" ] && {
            [ ! -z "${colall}" ] && colall+=';'
            colall+="${_col["fg-${fg}"]}"
        } || {
            local key=""
            key="$(_colour_validate 'fg' "${fg}")" && {
                [ ! -z "${colall}" ] && colall+=';'
                colall+="${_col["${key}"]}"
            } || {
                # Invalid Property
                >&2 echo "WARNING: Unknown foreground colour: ${fg}"
                fg=""
            }
        }
    }

    [ ! -z "${bg}" ] && {
#>&2 echo "_col['bg-${bg}']='${_col["bg-${bg}"]}'"
        [ ! -z "${_col["bg-${bg}"]}" ] && {
            [ ! -z "${colall}" ] && colall+=';'
            colall+="${_col["bg-${bg}"]}"
        } || {
            local key=""
            key="$(_colour_validate 'bg' "${bg}")" && {
                [ ! -z "${colall}" ] && colall+=';'
                colall+="${_col["${key}"]}"
            } || {
                # Invalid Property
                >&2 echo "WARNING: Unknown background colour: ${bg}"
                bg=""
            }
        }
    }

    echo -n ${apply:+-e} "\033[${colall}m"
}

secsource="${BASH_SOURCE[1]##*/}"
[ "${secsource%.*}" == ".bashrc" ]\
|| [ "${secsource}" == ".bashrc" ]\
&& {
    # Must declare explicitly as array in order to iterate over keys
    declare -A _pscol _pscolfg _pscolbg

    for i in "${!col[@]}"; do #{
        eval '_pscol[${i}]="\[${col[${i}]}\]"'
    done #}

    for i in "${!colfg[@]}"; do #{
        eval '_pscolfg[${i}]="\[${colfg[${i}]}\]"'
    done #}

    for i in "${!colbg[@]}"; do #{
        eval '_pscolbg[${i}]="\[${colbg[${i}]}\]"'
    done #}
}

# Takes "BG"/"FG", then R, G and B (values 0 - 5)
#   -or-
# 6 values: R, G, B (background) and R, G, B (foreground) (values 0 - 5)
function 256color() {
    local output="\x1b["

    [ ${#} -ne 4 ] && [ ${#} -ne 6 ] && {
        echo "ERROR: Wrong number of parameters" >&2

cat <<EOF
Usage: 256color "BG"|"FG" <r> <g> <b>
       256color <br> <bg> <bb> <fr> <fg> <fb>

<r>/<g>/<b>/<br>/<bg>/<bb>/<fr>/<fg>/<fb> - Number between 0 and 5
EOF

        return 1
    }

    [ ${#} -eq 4 ] && {
        if [ "${1^^}" == "FG" ]; then #{
            output+="38;5;"
            shift 1
        elif [ "${1^^}" == "BG" ]; then #} {
            output+="48;5;"
            shift 1
        else #} {
            echo "ERROR: With 4 parameters, first is expected to be 'BG' or 'FG'" >&2

cat <<EOF
Usage: 256color "BG"|"FG" <r> <g> <b>
       256color <br> <bg> <bb> <fr> <fg> <fb>

<r>/<g>/<b>/<br>/<bg>/<bb>/<fr>/<fg>/<fb> - Number between 0 and 5
EOF

            return 1
        fi #}

        true
    } || {
        output+="48;5;"
    }

    local c=$(( 16 + (${1} * 36) + (${2} * 6) + ${3} ))
    shift 3
    output+="${c}"

    [ ${#} -gt 0 ] && {
        local c=$(( 16 + (${1} * 36) + (${2} * 6) + ${3} ))
        shift 3
        output+=";38;5;${c}"
    }

    output+="m"

    echo "${output}"
}

# vim:ts=4:tw=80:sw=4:et:ai:si
